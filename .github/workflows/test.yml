name: test
on:
        push:
        pull_request:
        schedule:
                - cron: '30 1 * * *' #every day at 1:30am

jobs:
        generate-jobs:
                name: Generate Jobs
                runs-on: ubuntu-latest
                outputs:
                        strategy: ${{ steps.generate-jobs.outputs.strategy }}
                steps:
                        - id: generate-jobs
                          name: Generate Jobs
                          run: |
                                  curl -o kernel-series.yaml https://kernel.ubuntu.com/git/ubuntu/kteam-tools.git/plain/info/kernel-series.yaml
                                  json=$(cat kernel-series.yaml | yq -o json 'with_entries(select(.value.supported or .value.development)) | sort_keys(.) | map_values({ "codename": .codename, "sources": (.sources | with_entries(select(.key == "linux" or .key == "linux-unstable" or .key == "linux-hwe-*" or .key == "linux-oem-*")) | map_values(.variants)) })')
                                  # {
                                  #   ...
                                  #   "23.10": {
                                  #     "codename": "mantic",
                                  #     "sources": {
                                  #       "linux-unstable": [
                                  #         "-wip"
                                  #       ],
                                  #       "linux": [
                                  #         "--",
                                  #         "-hwe-22.04",
                                  #         "-hwe-22.04-edge"
                                  #       ]
                                  #     }
                                  #   }
                                  # }

                                  strategy='{"matrix": {"include": []}}'
                                  for series in $(jq <<<"$json" -r 'keys | .[]'); do
                                          [ "$({ echo $series; echo 22.04; } | sort -V -r | head -n 1)" = "$series" ] || continue

                                          kernels=
                                          for kernel in $(jq <<<"$json" -r ".\"$series\".sources | keys | .[]"); do
                                                  for variant in $(jq <<<"$json" -r ".\"$series\".sources.\"$kernel\" | .[]"); do
                                                          case "$variant" in
                                                                  --) kernels="${kernels:+${kernels} }generic" ;;
                                                                  *) case "$kernel" in
                                                                          linux-unstable|linux-hwe-*) kernels="${kernels:+${kernels} }generic$variant" ;;
                                                                          linux-oem-*) kernels="${kernels:+${kernels} }oem$variant" ;;
                                                                  esac ;;
                                                          esac;
                                                  done
                                          done;
                                          strategy="$(jq <<<"$strategy" -c \
                                                  --arg codename $(jq <<<"$json" -r ".\"$series\".codename") \
                                                  '.matrix.include[.matrix.include | length] |= . + {"codename": $codename, "kernels": "'"$kernels"'"}')"
                                  done

                                  echo "strategy=$strategy" | tee -a "$GITHUB_OUTPUT"
                                  jq . <<<"$strategy" # sanity check / debugging aid

        build:
                needs: generate-jobs
                strategy: ${{ fromJson(needs.generate-jobs.outputs.strategy) }}

                # ubuntu-lastest is currently still 20.04
                runs-on: ubuntu-latest
                container: ubuntu:${{ matrix.codename }}
                steps:
                        - name: Checkout
                          uses: actions/checkout@v3

                        - name: Checkout ivsc-driver repo
                          uses: actions/checkout@v3
                          with:
                            repository: intel/ivsc-driver
                            path: ivsc-driver

                        - name: Merge with ivsc-driver
                          shell: bash
                          run: |
                                  cp -r ivsc-driver/backport-include ivsc-driver/drivers ivsc-driver/include .
                                  rm -rf ivsc-driver

                        - name: Prepare environment
                          shell: bash
                          run: |
                                  apt-get update --quiet;
                                  apt-get install --yes --no-install-recommends dkms gpg-agent kmod software-properties-common sudo

                        - name: Download header files
                          shell: bash
                          run: |
                                  case " ${{ matrix.kernels }} " in
                                          # Add unstable kernel ppa
                                          *" generic-wip "*)
                                                  add-apt-repository ppa:canonical-kernel-team/unstable;
                                                  ;;
                                  esac

                                  apt-get update --quiet;
                                  for pkg in $(echo "${{ matrix.kernels }}" | sed 's/[^ ]* */linux-headers-&/g'); do
                                          { apt-cache search --names-only $pkg | grep -q "^$pkg - "; } || continue
                                          apt-get install --yes $pkg
                                  done

                        - name: Register with dkms
                          shell: bash
                          run: |
                                  dkms add .

                        - name: Compile driver
                          shell: bash
                          run: |
                                  # run dkms build and all available kernel headers
                                  failed=""
                                  succeeded=""
                                  for kver in /lib/modules/*/build; do
                                        # skip the kernel headers from the azure kernel. These kernel headers
                                        # are preinstalled and of no interest
                                        if [[ "$kver" == *"azure"* ]]; then
                                                echo "Skipping $kver - This is the kernel of the github runner.";
                                                continue;
                                        fi;
                                        test -d $kver || continue
                                        kver=${kver%/build}
                                        kver=${kver##*/}
                                        echo "=== Testing ${kver} ===";
                                        echo "running: dkms build -m ipu6-drivers/0.0.0 -k ${kver}";
                                        ret=$(sudo dkms build -m ipu6-drivers/0.0.0 -k ${kver} >&2; echo $?);
                                        if [ ${ret} -eq 0 ]; then
                                                succeeded="${succeeded} ${kver}"
                                        else
                                                echo "#### Skipped unexpected failure ${kver}";
                                                failed="${failed} ${kver}";
                                        fi;
                                  done
                                  if [ "x${failed}" != "x" ]; then
                                        echo "#### Failed kernels: ${failed}";
                                        exit 1
                                  fi
                                  echo "#### Successful builds for kernels: ${succeeded}";
