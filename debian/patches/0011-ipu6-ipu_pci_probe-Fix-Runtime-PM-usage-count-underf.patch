From: Hans de Goede <hdegoede@redhat.com>
Date: Fri, 21 Oct 2022 16:03:12 +0200
Subject: ipu6: ipu_pci_probe(): Fix "Runtime PM usage count underflow!" on
 probe errors

When the probe fails because e.g. acpi_dev_ready_for_enumeration()
returns false the following error is shown in dmesg:

"intel-ipu6 intel-ipu: Runtime PM usage count underflow!"

PCI drivers get called by the PCI core with a single pm_runtime reference
held by the core so that the device is active / in D0 during probe and the
core will put this reference on probe-error or when the driver is detached.
See the comment inside drivers/pci/pci-driver.c: local_pci_probe().

ipu_pci_probe() calls pm_runtime_put() + pm_runtime_allow() early on to
allow auto-suspend, but this is done at a point where probe-errors can
still happen and then on a probe-error the PCI core will do another
pm_runtime_put() itself leading to a pm_runtime count unbalance.

To fix this move the pm_runtime_put() + _allow() to the end of probe().

Probe() also calls pm_runtime_get_sync(&isp->psys->dev) later on,
note this is on a *different* device. This is undone with a
pm_runtime_put(&isp->psys->dev) on both the error and success paths,
but in the success path this pm_runtime_put(&isp->psys->dev) was done
before the final error-check, leading to a double put() in case of hitting
that error-exit. Fix this by moving the pm_runtime_put(&isp->psys->dev)
to the end of the probe() function too.

Signed-off-by: Hans de Goede <hdegoede@redhat.com>
(cherry picked from commit eb97475ef5cf5288dc6162afc30443713514d8c3)
Signed-off-by: You-Sheng Yang (vicamo) <vicamo.yang@canonical.com>
---
 drivers/media/pci/intel/ipu.c | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/drivers/media/pci/intel/ipu.c b/drivers/media/pci/intel/ipu.c
index 879f137..e7f17c0 100644
--- a/drivers/media/pci/intel/ipu.c
+++ b/drivers/media/pci/intel/ipu.c
@@ -539,9 +539,6 @@ static int ipu_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (rval)
 		dev_err(&pdev->dev, "Trace support not available\n");
 
-	pm_runtime_put_noidle(&pdev->dev);
-	pm_runtime_allow(&pdev->dev);
-
 	/*
 	 * NOTE Device hierarchy below is important to ensure proper
 	 * runtime suspend and resume order.
@@ -625,7 +622,6 @@ static int ipu_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	}
 
 	ipu_mmu_hw_cleanup(isp->psys->mmu);
-	pm_runtime_put(&isp->psys->dev);
 
 #ifdef CONFIG_DEBUG_FS
 	rval = ipu_init_debugfs(isp);
@@ -644,6 +640,9 @@ static int ipu_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 		 IPU_MAJOR_VERSION,
 		 IPU_MINOR_VERSION);
 
+	pm_runtime_allow(&pdev->dev);
+	pm_runtime_put(&isp->psys->dev);
+	pm_runtime_put(&pdev->dev);
 	return 0;
 
 out_ipu_bus_del_devices:
