From: Hans de Goede <hdegoede@redhat.com>
Date: Fri, 21 Oct 2022 22:54:36 +0200
Subject: ipu-bus: Split ipu_bus_add_device() into initialize() + add()

Since all 3 the intel_ipu6, intel_ipu6_isys and intel_ipu6_psys modules
use the same PCI modaliases to get automatically loaded, they can be loaded
in any order. This means that one or both of the intel-ipu6-bus drivers can
be loaded before ipu_pci_probe() creates the devices.

This in turn means that the ipu_bus_device MUST be fully ready to be probed
before device_add() is called for the ipu_bus_device.

In order to make sure that the device is fully ready we must split
ipu_bus_add_device() into separate initialize() + add() steps analog to
how the driver-core has device_initialize() and device_add().

This fixes the following 2 problems:

1. ipu_bus_probe() calls pm_runtime_get_sync() this call would fail with
-EACCESS if intel_ipu6_isys / intel_ipu6_psys were loaded already when
ipu_pci_probe() runs because pm_runtime_enable() had not run yet when
device_register() gets called and since the driver was already registered
device_register() would immediately call ipu_bus_probe().

To fix this call pm_runtime_forbid() (to temporarily disallow auto-suspend)
and pm_runtime_enable() from the new ipu_bus_initialize_device(). So that
runtime-pm is always enabled before the device_add() is done.

While at it also add a missing pm_runtime_put() when pm_runtime_get_sync()
fails, since pm_runtime_get_sync() always increases the pm_runtime count,
even on failure.

2. The pm_runtime_get_sync() issue can be fixed without splitting
ipu_bus_add_device(), but then isys_probe() will crash with a NULL pointer
dereference on adev->mmu.

isys_probe() will run directly from the device_register() call and this
runs before ipu_isys_init() calls isys->mmu = ipu_mmu_init(...).

Fixing this requires splitting the ipu_bus device creation into
initialize_device() + add_device() so that the ipu_bus_add_device() call
can be delayed till after ipu_mmu_init() is done.

Signed-off-by: Hans de Goede <hdegoede@redhat.com>
(cherry picked from commit 3740a9e3fa7d8f91780f976488161d83036ad974)
Signed-off-by: You-Sheng Yang (vicamo) <vicamo.yang@canonical.com>
---
 drivers/media/pci/intel/ipu-bus.c | 31 ++++++++++++++++++++-----------
 drivers/media/pci/intel/ipu-bus.h |  9 +++++----
 drivers/media/pci/intel/ipu.c     | 17 ++++++++++++-----
 3 files changed, 37 insertions(+), 20 deletions(-)

diff --git a/drivers/media/pci/intel/ipu-bus.c b/drivers/media/pci/intel/ipu-bus.c
index b4778de..96792e1 100644
--- a/drivers/media/pci/intel/ipu-bus.c
+++ b/drivers/media/pci/intel/ipu-bus.c
@@ -100,6 +100,7 @@ static int ipu_bus_probe(struct device *dev)
 	}
 	rval = pm_runtime_get_sync(&adev->dev);
 	if (rval < 0) {
+		pm_runtime_put(&adev->dev);
 		dev_err(&adev->dev, "Failed to get runtime PM\n");
 		goto out_err;
 	}
@@ -150,14 +151,13 @@ static void ipu_bus_release(struct device *dev)
 {
 }
 
-struct ipu_bus_device *ipu_bus_add_device(struct pci_dev *pdev,
-					  struct device *parent, void *pdata,
-					  struct ipu_buttress_ctrl *ctrl,
-					  char *name, unsigned int nr)
+struct ipu_bus_device *ipu_bus_initialize_device(struct pci_dev *pdev,
+						 struct device *parent, void *pdata,
+						 struct ipu_buttress_ctrl *ctrl,
+						 char *name, unsigned int nr)
 {
 	struct ipu_bus_device *adev;
 	struct ipu_device *isp = pci_get_drvdata(pdev);
-	int rval;
 
 	adev = devm_kzalloc(&pdev->dev, sizeof(*adev), GFP_KERNEL);
 	if (!adev)
@@ -183,20 +183,29 @@ struct ipu_bus_device *ipu_bus_add_device(struct pci_dev *pdev,
 	mutex_init(&adev->resume_lock);
 	dev_set_name(&adev->dev, "%s%d", name, nr);
 
-	rval = device_register(&adev->dev);
+	device_initialize(&adev->dev);
+	pm_runtime_forbid(&adev->dev);
+	pm_runtime_enable(&adev->dev);
+
+	return adev;
+}
+
+int ipu_bus_add_device(struct ipu_bus_device *adev)
+{
+	int rval;
+
+	rval = device_add(&adev->dev);
 	if (rval) {
 		put_device(&adev->dev);
-		return ERR_PTR(rval);
+		return rval;
 	}
 
 	mutex_lock(&ipu_bus_mutex);
-	list_add(&adev->list, &isp->devices);
+	list_add(&adev->list, &adev->isp->devices);
 	mutex_unlock(&ipu_bus_mutex);
 
 	pm_runtime_allow(&adev->dev);
-	pm_runtime_enable(&adev->dev);
-
-	return adev;
+	return 0;
 }
 
 void ipu_bus_del_devices(struct pci_dev *pdev)
diff --git a/drivers/media/pci/intel/ipu-bus.h b/drivers/media/pci/intel/ipu-bus.h
index 1108cd3..4382cda 100644
--- a/drivers/media/pci/intel/ipu-bus.h
+++ b/drivers/media/pci/intel/ipu-bus.h
@@ -43,10 +43,11 @@ struct ipu_bus_driver {
 
 #define to_ipu_bus_driver(_drv) container_of(_drv, struct ipu_bus_driver, drv)
 
-struct ipu_bus_device *ipu_bus_add_device(struct pci_dev *pdev,
-					  struct device *parent, void *pdata,
-					  struct ipu_buttress_ctrl *ctrl,
-					  char *name, unsigned int nr);
+struct ipu_bus_device *ipu_bus_initialize_device(struct pci_dev *pdev,
+						 struct device *parent, void *pdata,
+						 struct ipu_buttress_ctrl *ctrl,
+						 char *name, unsigned int nr);
+int ipu_bus_add_device(struct ipu_bus_device *adev);
 void ipu_bus_del_devices(struct pci_dev *pdev);
 
 int ipu_bus_register_driver(struct ipu_bus_driver *adrv);
diff --git a/drivers/media/pci/intel/ipu.c b/drivers/media/pci/intel/ipu.c
index e7f17c0..790fb6d 100644
--- a/drivers/media/pci/intel/ipu.c
+++ b/drivers/media/pci/intel/ipu.c
@@ -61,8 +61,8 @@ static struct ipu_bus_device *ipu_isys_init(struct pci_dev *pdev,
 {
 	struct ipu_bus_device *isys;
 	struct ipu_isys_pdata *pdata;
-#if defined(CONFIG_IPU_ISYS_BRIDGE)
 	int ret;
+#if defined(CONFIG_IPU_ISYS_BRIDGE)
 	struct fwnode_handle *fwnode = dev_fwnode(&pdev->dev);
 
 	ret = ipu_isys_check_fwnode_graph(fwnode);
@@ -92,8 +92,7 @@ static struct ipu_bus_device *ipu_isys_init(struct pci_dev *pdev,
 	if (ipu_ver == IPU_VER_6SE)
 		ctrl->ratio = IPU6SE_IS_FREQ_CTL_DEFAULT_RATIO;
 
-	isys = ipu_bus_add_device(pdev, parent, pdata, ctrl,
-				  IPU_ISYS_NAME, nr);
+	isys = ipu_bus_initialize_device(pdev, parent, pdata, ctrl, IPU_ISYS_NAME, nr);
 	if (IS_ERR(isys)) {
 		dev_err_probe(&pdev->dev, PTR_ERR(isys), "ipu_bus_add_device(isys) failed\n");
 		return ERR_CAST(isys);
@@ -108,6 +107,10 @@ static struct ipu_bus_device *ipu_isys_init(struct pci_dev *pdev,
 
 	isys->mmu->dev = &isys->dev;
 
+	ret = ipu_bus_add_device(isys);
+	if (ret)
+		return ERR_PTR(ret);
+
 	return isys;
 }
 
@@ -120,6 +123,7 @@ static struct ipu_bus_device *ipu_psys_init(struct pci_dev *pdev,
 {
 	struct ipu_bus_device *psys;
 	struct ipu_psys_pdata *pdata;
+	int ret;
 
 	pdata = devm_kzalloc(&pdev->dev, sizeof(*pdata), GFP_KERNEL);
 	if (!pdata)
@@ -128,8 +132,7 @@ static struct ipu_bus_device *ipu_psys_init(struct pci_dev *pdev,
 	pdata->base = base;
 	pdata->ipdata = ipdata;
 
-	psys = ipu_bus_add_device(pdev, parent, pdata, ctrl,
-				  IPU_PSYS_NAME, nr);
+	psys = ipu_bus_initialize_device(pdev, parent, pdata, ctrl, IPU_PSYS_NAME, nr);
 	if (IS_ERR(psys)) {
 		dev_err_probe(&pdev->dev, PTR_ERR(psys), "ipu_bus_add_device(psys) failed\n");
 		return ERR_CAST(psys);
@@ -144,6 +147,10 @@ static struct ipu_bus_device *ipu_psys_init(struct pci_dev *pdev,
 
 	psys->mmu->dev = &psys->dev;
 
+	ret = ipu_bus_add_device(psys);
+	if (ret)
+		return ERR_PTR(ret);
+
 	return psys;
 }
 
